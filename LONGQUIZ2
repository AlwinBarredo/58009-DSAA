EDGES
class Graph:
    def __init__(self, gdict=None):
        if gdict is None:
            gdict = {}
        self.gdict = gdict

    def edges(self):
        return self.find_edges()

    def find_edges(self):
        edgename = []
        for vrtx in self.gdict:
            for nxtvrtx in self.gdict[vrtx]:
                if {nxtvrtx, vrtx} not in edgename:
                    edgename.append({vrtx, nxtvrtx})
        return edgename

graph_elements = {
    'H': ['I', 'J', 'K'],
    'I': ['E', 'F', 'H'],
    'J': ['E', 'F', 'H'],
    'E': ['I', 'M', 'K', 'J'],
    'K': ['E', 'H', 'F'],
    'F': ['J', 'K', 'P', 'I'],
    'M': ['E'],
    'P': ['F']
}
g = Graph(graph_elements)
print(g.edges())

VERTICES
class graph:
   def __init__(self,gdict=None):
      if gdict is None:
         gdict = []
      self.gdict = gdict
   def getVertices(self):
      return list(self.gdict.keys())

graph_elements = {
    'H': ['I', 'J', 'K'],
    'J': ['E', 'F', 'H'],
    'I': ['E', 'F', 'H'],
    'F': ['J', 'K', 'P', 'I'],
    'K': ['E', 'H', 'F'],
    'E': ['I', 'M', 'K', 'J'],
    'P': ['F'],
    'M': ['E'],
}
g = graph(graph_elements)
print(g.getVertices())
